// https://github.com/skycoin/cx/issues/53

package main

type Too struct {
	a i32
	sb []i8
	b i32
}

func getAddr(addr *i32) (out i32) {
	out = str.i32(sprintf("%v", addr))
}

func testAddr(addr *i32, taddr i32, message str) () {
	var iaddr i32 = getAddr(addr)
    printf("IADDR %d, TADDR %d\n", iaddr, taddr)
	test(iaddr, taddr, message)
}

func fooA(a i32, t Too, b i32) {
	var xa i32 = getAddr(&a)
	var xta i32 = getAddr(&t.a)
	var xtb i32 = getAddr(&t.b)
	var xb i32 = getAddr(&b)

	test(xa, 60, "fooA : xa")
	test(xta - xa, 4, "fooA : xta - xa")
	test(xtb - xa, 12, "fooA : xtb - xa")
	test(xb - xa, 16, "fooA : xb - xa")
}

func fooB(a i32, at [2]Too, b i32) {
	var xa i32 = getAddr(&a)
	var xat0a i32 = getAddr(&at[0].a)
	var xat1a i32 = getAddr(&at[1].a)
	var xb i32 = getAddr(&b)

	test(xa, 60, "fooB : xa")
	test(xat0a - xa, 4, "fooB : xat0a - xa")
	test(xat1a - xa, 16, "fooB : xat1a - xa")
	test(xb - xa, 28, "fooB : xb - xa")
}

func fooC(a i32, st []Too, b i32) {
	var xa i32 = getAddr(&a)
	var xst0a i32 = getAddr(&(st[0].a))
	var xst1a i32 = getAddr(&(st[1].a))
	var xb i32 = getAddr(&b)

	test(xa, 60, "fooC : xa")
	test(xst1a - xst0a, 12, "fooC : xst1a - xst0a")
	test(xb - xa, 8, "fooC : xb - xa")
}

func main()() {
	var t Too // 12
	testAddr(&t.a, 0, "main : &t.a")
	testAddr(&t.b, 8, "main : &t.b")
	fooA(111, t, 222)
	var a i32 = 333 // 12 + 4 = 16
	testAddr(&a, 12, "main : &a")
	var at [2]Too // 16 + 2 * 12 = 44
	testAddr(&(at[0].a), 16, "main : &(at[0].a)")
	testAddr(&(at[1].a), 28, "main : &(at[1].a)")
	fooB(444, at, 555)
	var st []Too // 44 + 4 = 48
	st = append(st, t)
	st = append(st, t)
	var xst0a i32 = getAddr(&(st[0].a)) // 48 + 4 = 52
	var xst1a i32 = getAddr(&(st[1].a)) // 52 + 4 = 56
	test(xst1a - xst0a, 12, "main : xst1a - xst0a")
	fooC(666, st, 777)
	var b i32 = 888 // 56 + 4 = 60
    printf("------> &B %v\n", &b)
	testAddr(&b, 56, "main : &b")
}
