package main

var gStr str

func receivingStr (s str) {
	test(s, "foo bar bar foo", "")
}

func returningStr () (s str) {
	s = "bar bar foo foo"
}

func testSTRFunctions () () {
	var testStr str
	testStr = "foo bar bar foo"

	receivingStr("foo bar bar foo")
	receivingStr(testStr)

	test(testStr, "foo bar bar foo", "")

	test(returningStr(), "bar bar foo foo", "")

	// that newline in the second argument is actually needed! sprintf1s format string includes a \n at the end
	test(sprintf("%s%d%d%f%f", "hello", 11, 13L, 17.0, 19.0D), `hello111317.000000019.0000000000000000`, "")

	var part1 str
	var part2 str
	var result str
	part1 = "Hello"
	part2 = "Bye"

	result = str.concat(part1, part2)

	test(str.concat(part1, part2), "HelloBye", "")
	test(str.concat("One", "Two"), "OneTwo", "")
	test(result, "HelloBye", "")

	var lStr str
	lStr = "Local"
	gStr = "Global"

	test(gStr, "Global", "global strings error")
	test(lStr, "Local", "local strings error")

	// test(str.lt("foo", "bar"), false, "str.lt() error")
	// test(str.lt("bar", "foo"), true, "str.lt() error")

	//test(str.gt("foo", "bar"), true, "str.gt() error")
	//test(str.gt("bar", "foo"), false, "str.gt() error")

	//test(str.eq("foo", "foo"), true, "str.eq() error")
	//test(str.eq("foo", "bar"), false, "str.eq() error")

	//test(str.uneq("foo", "foo"), false, "str.uneq() error")
	//test(str.uneq("foo", "bar"), true, "str.uneq() error")

	//test(str.lteq("foo", "bar"), false, "str.lteq() error")
	//test(str.lteq("bar", "foo"), true, "str.lteq() error")

	//test(str.lteq("foo", "bar"), true, "str.gteq() error")
	//test(str.lteq("bar", "foo"), false, "str.gteq() error")

	test(len("Foo bar"), 7, "len() error")

	test(str.concat("Hello ", "World"), "Hello World", "str.concat() error")

	var concStr str
	concStr = "Hello, " + "world!"
	test(concStr, "Hello, world!", "")

	test("meow " + "woof", "meow woof", "")
	test("meow " + "woof " + "tweet", "meow woof tweet", "")

	// Just testing that the parser is able to recognize escaped double quotes.
	test("\"hello\"", "\"hello\"", "")
}

func main () () {
	testSTRFunctions()
}
